// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`composition as should render correctly 1`] = `
.emotion-1 {
  margin: unset;
  padding: unset;
  border: unset;
  background: unset;
  font: unset;
  font-family: inherit;
  font-size: 100%;
  box-sizing: border-box;
}

.emotion-1:focus:not(:focus-visible) {
  outline: none;
}

<div>
  <div
    aria-describedby="test"
    class="emotion-0 emotion-1 emotion-2 bb-Box bb-TooltipReference"
    tabindex="0"
  >
    Hello world
  </div>
</div>
`;

exports[`composition hook should return with Tooltip props 1`] = `
Object {
  "children": <React.Fragment>
    .emotion-0 {
  margin: unset;
  padding: unset;
  border: unset;
  background: unset;
  font: unset;
  font-family: inherit;
  font-size: 100%;
  box-sizing: border-box;
}

.emotion-0:focus:not(:focus-visible) {
  outline: none;
}

<Tooltip.Reference
      animated={false}
      animating={false}
      baseId="test"
      className="emotion-0 emotion-1 bb-Box"
      hide={[Function]}
      place={[Function]}
      placement="top"
      setAnimated={[Function]}
      setBaseId={[Function]}
      setVisible={[Function]}
      show={[Function]}
      stopAnimation={[Function]}
      toggle={[Function]}
      unstable_arrowRef={
        Object {
          "current": null,
        }
      }
      unstable_arrowStyles={Object {}}
      unstable_disclosureRef={
        Object {
          "current": null,
        }
      }
      unstable_idCountRef={
        Object {
          "current": 0,
        }
      }
      unstable_originalPlacement="top"
      unstable_popoverRef={
        Object {
          "current": null,
        }
      }
      unstable_popoverStyles={Object {}}
      unstable_referenceRef={
        Object {
          "current": null,
        }
      }
      unstable_setTimeout={[Function]}
      unstable_timeout={0}
      unstable_update={[Function]}
      visible={false}
    />
    <Tooltip.Content
      animated={false}
      animating={false}
      baseId="test"
      hide={[Function]}
      place={[Function]}
      placement="top"
      setAnimated={[Function]}
      setBaseId={[Function]}
      setVisible={[Function]}
      show={[Function]}
      stopAnimation={[Function]}
      toggle={[Function]}
      unstable_arrowRef={
        Object {
          "current": null,
        }
      }
      unstable_arrowStyles={Object {}}
      unstable_disclosureRef={
        Object {
          "current": null,
        }
      }
      unstable_idCountRef={
        Object {
          "current": 0,
        }
      }
      unstable_originalPlacement="top"
      unstable_popoverRef={
        Object {
          "current": null,
        }
      }
      unstable_popoverStyles={Object {}}
      unstable_referenceRef={
        Object {
          "current": null,
        }
      }
      unstable_setTimeout={[Function]}
      unstable_timeout={0}
      unstable_update={[Function]}
      visible={false}
    >
      This is content
    </Tooltip.Content>
  </React.Fragment>,
}
`;

exports[`composition render props should render correctly 1`] = `
<div>
  Hello world
</div>
`;

exports[`defaultProps should render correctly for className 1`] = `
.emotion-1 {
  margin: unset;
  padding: unset;
  border: unset;
  background: unset;
  font: unset;
  font-family: inherit;
  font-size: 100%;
  box-sizing: border-box;
}

.emotion-1:focus:not(:focus-visible) {
  outline: none;
}

.emotion-3 {
  color: var(--bb-palette-primary, #000000)!important;
}

<div>
  <div
    aria-describedby="test"
    class="emotion-0 emotion-1 emotion-2 emotion-3 test bb-Box bb-TooltipReference"
    tabindex="0"
  >
    hello world
  </div>
</div>
`;

exports[`overrides Tooltip.Content.base should render correctly 1`] = `
.emotion-1 {
  margin: unset;
  padding: unset;
  border: unset;
  background: unset;
  font: unset;
  font-family: inherit;
  font-size: 100%;
  box-sizing: border-box;
}

.emotion-1:focus:not(:focus-visible) {
  outline: none;
}

<div>
  <div
    aria-describedby="test"
    class="emotion-0 emotion-1 emotion-2 bb-Box bb-TooltipReference"
    tabindex="0"
  >
    hello world
  </div>
</div>
`;

exports[`overrides Tooltip.Reference.base should render correctly 1`] = `
.emotion-0 {
  background-color: var(--bb-palette-red, #ff0000);
}

.emotion-1 {
  margin: unset;
  padding: unset;
  border: unset;
  background: unset;
  font: unset;
  font-family: inherit;
  font-size: 100%;
  box-sizing: border-box;
}

.emotion-1:focus:not(:focus-visible) {
  outline: none;
}

<div>
  <div
    aria-describedby="test"
    class="emotion-0 emotion-1 emotion-2 bb-Box bb-TooltipReference"
    tabindex="0"
  >
    hello world
  </div>
</div>
`;

exports[`props should render correctly 1`] = `
.emotion-1 {
  margin: unset;
  padding: unset;
  border: unset;
  background: unset;
  font: unset;
  font-family: inherit;
  font-size: 100%;
  box-sizing: border-box;
}

.emotion-1:focus:not(:focus-visible) {
  outline: none;
}

<div>
  <div
    aria-describedby="test"
    class="emotion-0 emotion-1 emotion-2 bb-Box bb-TooltipReference"
    tabindex="0"
  >
    Hello world
  </div>
</div>
`;

exports[`props should render correctly with CSS props 1`] = `
.emotion-1 {
  margin: unset;
  padding: unset;
  border: unset;
  background: unset;
  font: unset;
  font-family: inherit;
  font-size: 100%;
  box-sizing: border-box;
}

.emotion-1:focus:not(:focus-visible) {
  outline: none;
}

.emotion-3 {
  color: var(--bb-palette-primary, #000000)!important;
}

<div>
  <div
    aria-describedby="test"
    class="emotion-0 emotion-1 emotion-2 emotion-3 bb-Box bb-TooltipReference"
    tabindex="0"
  >
    Hello world
  </div>
</div>
`;

exports[`theming Tooltip.Content.base should render correctly 1`] = `
.emotion-1 {
  margin: unset;
  padding: unset;
  border: unset;
  background: unset;
  font: unset;
  font-family: inherit;
  font-size: 100%;
  box-sizing: border-box;
}

.emotion-1:focus:not(:focus-visible) {
  outline: none;
}

<div>
  <div
    aria-describedby="test"
    class="emotion-0 emotion-1 emotion-2 bb-Box bb-TooltipReference"
    tabindex="0"
  >
    hello world
  </div>
</div>
`;

exports[`theming Tooltip.Reference.base should render correctly 1`] = `
.emotion-0 {
  background-color: var(--bb-palette-red, #ff0000);
}

.emotion-1 {
  margin: unset;
  padding: unset;
  border: unset;
  background: unset;
  font: unset;
  font-family: inherit;
  font-size: 100%;
  box-sizing: border-box;
}

.emotion-1:focus:not(:focus-visible) {
  outline: none;
}

<div>
  <div
    aria-describedby="test"
    class="emotion-0 emotion-1 emotion-2 bb-Box bb-TooltipReference"
    tabindex="0"
  >
    hello world
  </div>
</div>
`;
